value = 50),
br(),
br(),
checkboxInput(inputId = "topFreqB",
label = "Plot Bar Chart",
value = F),
sliderInput(inputId = "topBarchart",
label = "Number of terms for bar chart:",
min = 1,
max = 25,
value = 10),
br(),
br(),
checkboxInput(inputId = "topFreqN",
label = "Plot Network Graph",
value = F),
sliderInput(inputId = "topNetwork",
label = "Number of edges for network graph:",
min = 1,
max = 150,
value = 50)
),
mainPanel(
wordcloud2Output(outputId = "WC"),
plotOutput(outputId = "figure")
)
)
),
tabPanel("Individual Terms",
titlePanel(h1("Comparison of Proportions",
align = "center")),
sidebarLayout(
sidebarPanel(
selectInput(inputId = "attribute",
label = "Select the attribute:",
choices = c("Gender" = "gender",
"Marital Status" = "marital",
"Parenthood" = "parenthood",
"Reflection Period" = "reflection_period")
)
),
mainPanel(
plotOutput(outputId = "scatter")
)
)
),
tabPanel("Pair of Words",
titlePanel(h1("Most Frequent Bigrams",
align = "center")),
sidebarLayout(
sidebarPanel(
selectInput(inputId = "factor",
label = "Select the attribute:",
choices = c("Gender" = "gender",
"Marital Status" = "marital",
"Parenthood" = "parenthood",
"Reflection Period" = "reflection_period")
),
numericInput(inputId = "topBigrams",
label = "Number of top pairs to view:",
min = 1,
max = 25,
value = 10)
),
mainPanel(
plotOutput(outputId = "bar")
)
)
),
tabPanel("Data",
DT::dataTableOutput("table")
)
)
server <- function(input, output, session) {
pt1 <- reactive({
if(!input$topFreqB) return(NULL)
word_count %>%
slice(1:input$topBarchart) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n)) +
geom_col() +
xlab(NULL) +
ylab("Word Frequency")+
coord_flip()
})
pt2 <- reactive({
if(!input$topFreqN) return(NULL)
bigram_graph <- bigram_counts %>%
slice(1:input$topNetwork) %>%
graph_from_data_frame()
set.seed(123)
x <- grid::arrow(type = "closed", length = unit(.1, "inches"))
ggraph(bigram_graph, layout = "fr") +
geom_edge_link(aes(edge_alpha = n), show.legend = FALSE,
arrow = x, end_cap = circle(.05, 'inches')) +
geom_node_point(color = "skyblue", size = 3) +
geom_node_text(aes(label = name), repel = TRUE) +
theme_void()
})
output$WC <- renderWordcloud2({
word_count %>%
slice(1:input$topWordcloud) %>%
wordcloud2(size = 0.6,
rotateRatio = 0)
})
output$figure <- renderPlot(height = 500, width = 500, {
ptlist <- list(pt1(),pt2())
ptlist <- ptlist[!sapply(ptlist, is.null)]
if(length(ptlist)==0) return(NULL)
lay <- rbind(c(1,1),
c(2,2))
grid.arrange(grobs = ptlist, layout_matrix = lay)
})
selectedAttribute <- reactive({
list(atr = input$attribute)
})
output$scatter <- renderPlot({
temp <- bag_of_words %>%
count(!!as.name(selectedAttribute()$atr), word) %>%
group_by(!!as.name(selectedAttribute()$atr)) %>%
mutate(proportion = n / sum(n)) %>%
select(-n) %>%
spread(!!as.name(selectedAttribute()$atr), proportion)
ggplot(temp,
aes_string(x = colnames(temp)[2], y = colnames(temp)[3]),
color = abs(colnames(temp)[3] - colnames(temp)[2])) +
geom_abline(color = "gray40", lty = 2) +
geom_jitter(alpha = 0.1, size = 1, width = 0.3, height = 0.3) +
geom_text(aes(label = word), check_overlap = TRUE, vjust = 1.5) +
scale_x_log10(labels = percent_format()) +
scale_y_log10(labels = percent_format()) +
scale_color_gradient(limits = c(0, 0.001), low = "darkslategray4", high = "gray75") +
theme(legend.position="none")
})
selectedBigram <- reactive({
list(var = input$factor)
})
output$bar <- renderPlot({
hm_bigrams %>%
count(!!as.name(selectedBigram()$var), bigram, sort = TRUE) %>%
group_by(!!as.name(selectedBigram()$var)) %>%
top_n(input$topBigrams) %>%
ungroup() %>%
mutate(bigram = reorder(bigram, n)) %>%
ggplot(aes(bigram, n, fill = !!as.name(selectedBigram()$var))) +
geom_col(show.legend = FALSE) +
facet_wrap(as.formula(paste("~", selectedBigram()$var)), ncol = 2, scales = "free") +
coord_flip()
})
output$table <- DT::renderDataTable({
DT::datatable(hm_data)
})
}
shinyApp(ui, server)
word_count
word_df <- data.frame(word = names(word_count), count = word_count)
word_df <- word_df[1:50,]
wordcloud(word_df$count.word,word_df$count.n, random.order = FALSE, random.color= FALSE, colors = mycolors)
ggplot(word_count,aes(x=count.word)) + geom_bar() + coord_flip()
ggplot(word_df,aes(x=count.word)) + geom_bar() + coord_flip()
word_df <- data.frame(word = names(word_count), count = word_count)
word_50 <- word_df[1:50,]
wordcloud(word_50$count.word,word_df$count.n, random.order = FALSE, random.color= FALSE, colors = mycolors)
word_ten <- word_df[1:10,]
ggplot(word_ten,aes(x=count.word)) + geom_bar() + coord_flip()
word_ten <- word_df[1:10,]
ggplot(word_ten,aes(x=count.word)) + geom_bar()
word_ten <- word_df[1:10,]
ggplot(word_ten,aes(x=count.word)) + geom_bar(aes(y = count.n)) + coord_flip()
word_ten <- word_df[1:10,]
ggplot(word_ten,aes(x=count.word)) + geom_bar() + coord_flip()
word_ten <- word_df[1:10,]
ggplot(word_ten,aes(x=count.word)) + geom_bar(stat = identity) + coord_flip()
word_ten <- word_df[1:10,]
ggplot(word_ten,aes(x=count.word, y=count.n)) + geom_bar(stat = identity) + coord_flip()
word_ten <- word_df[1:10,]
ggplot(word_ten,aes(x=count.word, y=count.n)) + geom_bar(stat = identity) + coord_flip()
word_ten <- word_df[1:10,]
ggplot(data=word_ten,aes(x=count.word, y=count.n)) + geom_bar(stat = identity) + coord_flip()
class(word_ten$count.word)
class(word_ten$count.n)
word_ten <- word_df[1:10,]
ggplot(data=word_ten,aes(x=count.word, y=count.n)) + geom_bar() + coord_flip()
word_ten <- word_df[1:10,]
ggplot(data=word_ten,aes(x=count.word, y=count.n)) + geom_bar(stat = 'identity') + coord_flip()
sort(word_df)
head(word_count)
head(word_df)
word_ten
shinyApp(ui, server)
gender_parenthood <- ggplot(merge_data, aes(predicted_category)) + geom_bar(stat = 'count')
gender_parenthood + facet_grid(gender ~ .)
colnames(merge_data)
colnames(hm_data)
urlfile_cleansed<-'https://raw.githubusercontent.com/rit-public/HappyDB/master/happydb/data/cleaned_hm.csv'
hm_data <- read_csv(urlfile_cleansed)
urlfile_demo<-'https://raw.githubusercontent.com/rit-public/HappyDB/master/happydb/data/demographic.csv'
demo_data <- read_csv(urlfile_demo)
colnames(hm_data)
corpus <- VCorpus(VectorSource(hm_data$cleaned_hm))%>%
tm_map(content_transformer(tolower))%>%
tm_map(removePunctuation)%>%
tm_map(removeNumbers)%>%
tm_map(removeWords, character(0))%>%
tm_map(stripWhitespace)
stemmed <- tm_map(corpus, stemDocument) %>%
tidy() %>%
select(text)
dict <- tidy(corpus) %>%
select(text) %>%
unnest_tokens(dictionary, text)
temp <- bag_of_words %>%
count(gender, word) %>%
group_by(gender) %>%
mutate(proportion = n / sum(n)) %>%
select(-n) %>%
spread(gender, proportion)
temp
temp <- bag_of_words %>%
count(gender, word) %>%
group_by(gender) %>%
mutate(proportion = n / sum(n)) %>%
select(-n) %>%
spread(gender, proportion)
ggplot(temp,
aes_string(x = colnames(temp)[2], y = colnames(temp)[3]),
color = abs(colnames(temp)[3] - colnames(temp)[2])) +
geom_abline(color = "gray40", lty = 2) +
geom_jitter(alpha = 0.1, size = 1, width = 0.3, height = 0.3) +
geom_text(aes(label = word), check_overlap = TRUE, vjust = 1.5) +
scale_x_log10(labels = percent_format()) +
scale_y_log10(labels = percent_format()) +
scale_color_gradient(limits = c(0, 0.001), low = "darkslategray4", high = "gray75") +
theme(legend.position="none")
gender_word <- bag_of_words %>%
count(gender, word) %>%
group_by(gender) %>%
mutate(proportion = n / sum(n)) %>%
select(-n) %>%
spread(gender, proportion)
ggplot(gender_word,
aes_string(x = colnames(gender_word)[2], y = colnames(gender_word)[3]),
color = abs(colnames(gender_word)[3] - colnames(gender_word)[2])) +
geom_abline(color = "gray40", lty = 2) +
geom_jitter(alpha = 0.1, size = 1, width = 0.3, height = 0.3) +
geom_text(aes(label = word), check_overlap = TRUE, vjust = 1.5) +
scale_x_log10(labels = percent_format()) +
scale_y_log10(labels = percent_format()) +
scale_color_gradient(limits = c(0, 0.001), low = "darkslategray4", high = "gray75") +
theme(legend.position="none")
class(bag_of_words)
colnames(hm_data)
colnames(demo_data)
marital_word <- bag_of_words %>%
count(marital, word) %>%
group_by(marital) %>%
mutate(proportion = n / sum(n)) %>%
select(-n) %>%
spread(gender, proportion)
marital_word <- bag_of_words %>%
count(marital, word) %>%
group_by(marital) %>%
mutate(proportion = n / sum(n)) %>%
select(-n) %>%
spread(marital, proportion)
ggplot(marital_word,
aes_string(x = colnames(marital_word)[2], y = colnames(marital_word)[3]),
color = abs(colnames(marital_word)[3] - colnames(marital_word)[2])) +
geom_abline(color = "gray40", lty = 2) +
geom_jitter(alpha = 0.1, size = 1, width = 0.3, height = 0.3) +
geom_text(aes(label = word), check_overlap = TRUE, vjust = 1.5) +
scale_x_log10(labels = percent_format()) +
scale_y_log10(labels = percent_format()) +
scale_color_gradient(limits = c(0, 0.001), low = "darkslategray4", high = "gray75") +
theme(legend.position="none")
parent_word <- bag_of_words %>%
count(parenthood, word) %>%
group_by(parenthood) %>%
mutate(proportion = n / sum(n)) %>%
select(-n) %>%
spread(parenthood, proportion)
ggplot(parent_word,
aes_string(x = colnames(parent_word)[2], y = colnames(parent_word)[3]),
color = abs(colnames(parent_word)[3] - colnames(parent_word)[2])) +
geom_abline(color = "gray40", lty = 2) +
geom_jitter(alpha = 0.1, size = 1, width = 0.3, height = 0.3) +
geom_text(aes(label = word), check_overlap = TRUE, vjust = 1.5) +
scale_x_log10(labels = percent_format()) +
scale_y_log10(labels = percent_format()) +
scale_color_gradient(limits = c(0, 0.001), low = "darkslategray4", high = "gray75") +
theme(legend.position="none")
parent_word <- bag_of_words %>%
count(parenthood, word) %>%
group_by(parenthood) %>%
mutate(proportion = n / sum(n)) %>%
select(-n) %>%
spread(parenthood, proportion)
ggplot(parent_word,
aes_string(x = colnames(parent_word)[2], y = colnames(parent_word)[3]),
color = abs(colnames(parent_word)[3] - colnames(parent_word)[2])) +
geom_abline(color = "gray40", lty = 2) +
geom_jitter(alpha = 0.1, size = 1, width = 0.3, height = 0.3) +
geom_text(aes(label = word), check_overlap = TRUE, vjust = 1.5) +
scale_x_log10(labels = percent_format()) +
scale_y_log10(labels = percent_format()) +
scale_color_gradient(limits = c(0, 0.001), low = "darkslategray4", high = "gray75") +
theme(legend.position="none")
shinyApp(ui, server)
reflect_word <- bag_of_words %>%
count(reflection_period, word) %>%
group_by(reflection_period) %>%
mutate(proportion = n / sum(n)) %>%
select(-n) %>%
spread(reflection_period, proportion)
ggplot(reflect_word,
aes_string(x = colnames(reflect_word)[2], y = colnames(reflect_word)[3]),
color = abs(colnames(reflect_word)[3] - colnames(reflect_word)[2])) +
geom_abline(color = "gray40", lty = 2) +
geom_jitter(alpha = 0.1, size = 1, width = 0.3, height = 0.3) +
geom_text(aes(label = word), check_overlap = TRUE, vjust = 1.5) +
scale_x_log10(labels = percent_format()) +
scale_y_log10(labels = percent_format()) +
scale_color_gradient(limits = c(0, 0.001), low = "darkslategray4", high = "gray75") +
theme(legend.position="none")
reflect_word <- bag_of_words %>%
count(reflection_period, word) %>%
group_by(reflection_period) %>%
mutate(proportion = n / sum(n)) %>%
select(-n) %>%
spread(reflection_period, proportion)
ggplot(reflect_word,
aes_string(x = colnames(reflect_word)[2], y = colnames(reflect_word)[3]),
color = abs(colnames(reflect_word)[3] - colnames(reflect_word)[2])) +
geom_abline(color = "gray40", lty = 2) +
geom_jitter(alpha = 0.1, size = 1, width = 0.3, height = 0.3) +
geom_text(aes(label = word), check_overlap = TRUE, vjust = 1.5) +
scale_x_log10(labels = percent_format()) +
scale_y_log10(labels = percent_format()) +
scale_color_gradient(limits = c(0, 0.001), low = "darkslategray4", high = "gray75") +
theme(legend.position="none")
bag_of_words <- merge_data %>%
unnest_tokens(word, text)
hm_bigrams <- merge_data %>%
filter(count != 1) %>%
unnest_tokens(bigram, text, token = "ngrams", n = 2)
bigram_counts <- hm_bigrams %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
count(word1, word2, sort = TRUE)
hm_bigrams %>%
count(gender, bigram, sort = TRUE) %>%
group_by(gender) %>%
top_n(10) %>%
ungroup() %>%
mutate(bigram = reorder(bigram, n)) %>%
ggplot(aes(bigram, n, fill = !!as.name(selectedBigram()$var))) +
geom_col(show.legend = FALSE) +
facet_wrap(as.formula(paste("~", selectedBigram()$var)), ncol = 2, scales = "free") +
coord_flip()
hm_bigrams %>%
count(gender, bigram, sort = TRUE) %>%
group_by(gender) %>%
top_n(10) %>%
ungroup() %>%
mutate(bigram = reorder(bigram, n)) %>%
ggplot(aes(bigram, n, fill = gender)) +
geom_col(show.legend = FALSE) +
facet_wrap(as.formula(paste("~", gender, ncol = 2, scales = "free") +
coord_flip()
hm_bigrams %>%
count(gender, bigram, sort = TRUE) %>%
group_by(gender) %>%
top_n(10) %>%
ungroup() %>%
mutate(bigram = reorder(bigram, n))
ggplot(hm_bigrams, aes(bigram, n, fill = gender)) +
geom_col(show.legend = FALSE) +
facet_wrap(as.formula(paste("~", gender, ncol = 2, scales = "free") +
coord_flip()
hm_bigrams %>%
count(gender, bigram, sort = TRUE) %>%
group_by(gender) %>%
top_n(10) %>%
ungroup() %>%
mutate(bigram = reorder(bigram, n))
ggplot(hm_bigrams, aes(bigram, n, fill = gender)) +
geom_col(show.legend = FALSE) +
facet_wrap(as.formula(paste("~", gender, ncol = 2, scales = "free"))) +
coord_flip()
hm_bigrams %>%
count(gender, bigram, sort = TRUE) %>%
group_by(gender) %>%
top_n(10) %>%
ungroup() %>%
mutate(bigram = reorder(bigram, n))
ggplot(hm_bigrams, aes(bigram, n, fill = gender)) +
geom_col(show.legend = FALSE) +
facet_wrap(as.formula(paste("~", gender)), ncol = 2, scales = "free") +
coord_flip()
hm_bigrams %>%
count(gender, bigram, sort = TRUE) %>%
group_by(gender) %>%
top_n(10) %>%
ungroup() %>%
mutate(bigram = reorder(bigram, n)) %>%
ggplot(aes(bigram, n, fill = gender)) +
geom_col(show.legend = FALSE) +
facet_wrap(as.formula(paste("~", gender)), ncol = 2, scales = "free") +
coord_flip()
hm_bigrams
colnames(hm_bigrams)
hm_bigrams %>%
count(gender, bigram, sort = TRUE) %>%
group_by(gender) %>%
top_n(10) %>%
ungroup() %>%
mutate(bigram = reorder(bigram, n)) %>%
ggplot(aes(bigram, n, fill = gender)) +
geom_col(show.legend = FALSE) +
facet_wrap(.~gender, ncol = 2, scales = "free") +
coord_flip()
hm_bigrams
colnames(hm_bigrams)
hm_bigrams$bigram
hm_bigrams %>%
count(gender, bigram, sort = TRUE) %>%
group_by(gender) %>%
top_n(10) %>%
ungroup() %>%
mutate(bigram = reorder(bigram, n))
#ggplot(aes(bigram, n, fill = gender)) +
#     geom_col(show.legend = FALSE) +
#    facet_wrap(.~gender, ncol = 2, scales = "free") +
#   coord_flip()
hm_bigrams
gender_bigrams <- hm_bigrams %>%
count(gender, bigram, sort = TRUE) %>%
group_by(gender) %>%
top_n(10) %>%
ungroup() %>%
mutate(bigram = reorder(bigram, n))
#ggplot(aes(bigram, n, fill = gender)) +
#     geom_col(show.legend = FALSE) +
#    facet_wrap(.~gender, ncol = 2, scales = "free") +
#   coord_flip()
gender_bigrams
gender_bigrams <- hm_bigrams %>%
count(gender, bigram, sort = TRUE) %>%
group_by(gender) %>%
top_n(10) %>%
ungroup() %>%
mutate(bigram = reorder(bigram, n))
ggplot(data = gender_bigrams, aes(x = bigram, y = n)) + geom_bar(stat = 'identity') + facet_grid(.~gender) + coord_flip()
#ggplot(aes(bigram, n, fill = gender)) +
#     geom_col(show.legend = FALSE) +
#    facet_wrap(.~gender, ncol = 2, scales = "free") +
#   coord_flip()
#ggplot(data=word_ten,aes(x=count.word, y=count.n)) + geom_bar(stat = 'identity') + coord_flip()
gender_bigrams <- hm_bigrams %>%
count(gender, bigram, sort = TRUE) %>%
group_by(gender) %>%
top_n(10) %>%
ungroup() %>%
mutate(bigram = reorder(bigram, n))
ggplot(data = gender_bigrams, aes(x = bigram, y = n)) + geom_bar(stat = 'identity') + facet_grid(.~gender) + coord_flip()
gender_bigrams <- hm_bigrams %>%
count(gender, bigram, sort = TRUE) %>%
group_by(gender) %>%
top_n(10) %>%
ungroup() %>%
mutate(bigram = reorder(bigram, n))
ggplot(data = gender_bigrams, aes(x = bigram, y = n)) + geom_bar(stat = 'identity') + facet_grid(.~gender) + coord_flip()
colnames(hm_bigrams)
gender_bigrams <- hm_bigrams %>%
count(gender, bigram, sort = TRUE) %>%
group_by(gender) %>%
top_n(10) %>%
ungroup() %>%
mutate(bigram = reorder(bigram, n))
ggplot(data = gender_bigrams, aes(x = bigram, y = n)) + geom_bar(stat = 'identity') +
facet_grid(.~gender) + coord_flip()
marital_bigrams <- hm_bigrams %>%
count(marital, bigram, sort = TRUE) %>%
group_by(marital) %>%
top_n(10) %>%
ungroup() %>%
mutate(bigram = reorder(bigram, n))
ggplot(data = marital_bigrams, aes(x = bigram, y = n)) + geom_bar(stat = 'identity') +
facet_grid(.~marital) + coord_flip()
parent_bigrams <- hm_bigrams %>%
count(parenthood, bigram, sort = TRUE) %>%
group_by(parenthood) %>%
top_n(10) %>%
ungroup() %>%
mutate(bigram = reorder(bigram, n))
ggplot(data = parent_bigrams, aes(x = bigram, y = n)) + geom_bar(stat = 'identity') +
facet_grid(.~parenthood) + coord_flip()
reflect_bigrams <- hm_bigrams %>%
count(reflection_period, bigram, sort = TRUE) %>%
group_by(reflection_period) %>%
top_n(10) %>%
ungroup() %>%
mutate(bigram = reorder(bigram, n))
ggplot(data = reflect_bigrams, aes(x = bigram, y = n)) + geom_bar(stat = 'identity') +
facet_grid(.~reflection_period) + coord_flip()
reflect_bigrams <- hm_bigrams %>%
count(reflection_period, bigram, sort = TRUE) %>%
group_by(reflection_period) %>%
top_n(10) %>%
ungroup() %>%
mutate(bigram = reorder(bigram, n))
ggplot(data = reflect_bigrams, aes(x = bigram, y = n)) + geom_bar(stat = 'identity') +
facet_grid(.~reflection_period) + coord_flip()
